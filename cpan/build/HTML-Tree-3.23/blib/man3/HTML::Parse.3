.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Parse 3"
.TH HTML::Parse 3 "2006-08-04" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
HTML::Parse \- Deprecated, a wrapper around HTML::TreeBuilder
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  See the documentation for HTML::TreeBuilder
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Disclaimer: This module is provided only for backwards compatibility
with earlier versions of this library.  New code should \fInot\fR use
this module, and should really use the HTML::Parser and
HTML::TreeBuilder modules directly, instead.
.PP
The \f(CW\*(C`HTML::Parse\*(C'\fR module provides functions to parse \s-1HTML\s0 documents.
There are two functions exported by this module:
.ie n .IP "parse_html($html) or parse_html($html, $obj)" 4
.el .IP "parse_html($html) or parse_html($html, \f(CW$obj\fR)" 4
.IX Item "parse_html($html) or parse_html($html, $obj)"
This function is really just a synonym for \f(CW$obj\fR\->parse($html) and \f(CW$obj\fR
is assumed to be a subclass of \f(CW\*(C`HTML::Parser\*(C'\fR.  Refer to
HTML::Parser for more documentation.
.Sp
If \f(CW$obj\fR is not specified, the \f(CW$obj\fR will default to an internally
created new \f(CW\*(C`HTML::TreeBuilder\*(C'\fR object configured with \fIstrict_comment()\fR
turned on.  That class implements a parser that builds (and is) a \s-1HTML\s0
syntax tree with HTML::Element objects as nodes.
.Sp
The return value from \fIparse_html()\fR is \f(CW$obj\fR.
.IP "parse_htmlfile($file, [$obj])" 4
.IX Item "parse_htmlfile($file, [$obj])"
Same as \fIparse_html()\fR, but pulls the \s-1HTML\s0 to parse, from the named file.
.Sp
Returns \f(CW\*(C`undef\*(C'\fR if the file could not be opened, or \f(CW$obj\fR otherwise.
.PP
When a \f(CW\*(C`HTML::TreeBuilder\*(C'\fR object is created, the following variables
control how parsing takes place:
.IP "$HTML::Parse::IMPLICIT_TAGS" 4
.IX Item "$HTML::Parse::IMPLICIT_TAGS"
Setting this variable to true will instruct the parser to try to
deduce implicit elements and implicit end tags.  If this variable is
false you get a parse tree that just reflects the text as it stands.
Might be useful for quick & dirty parsing.  Default is true.
.Sp
Implicit elements have the \fIimplicit()\fR attribute set.
.IP "$HTML::Parse::IGNORE_UNKNOWN" 4
.IX Item "$HTML::Parse::IGNORE_UNKNOWN"
This variable contols whether unknow tags should be represented as
elements in the parse tree.  Default is true.
.IP "$HTML::Parse::IGNORE_TEXT" 4
.IX Item "$HTML::Parse::IGNORE_TEXT"
Do not represent the text content of elements.  This saves space if
all you want is to examine the structure of the document.  Default is
false.
.IP "$HTML::Parse::WARN" 4
.IX Item "$HTML::Parse::WARN"
Call \fIwarn()\fR with an apropriate message for syntax errors.  Default is
false.
.SH "REMEMBER!"
.IX Header "REMEMBER!"
HTML::TreeBuilder objects should be explicitly destroyed when you're
finished with them.  See HTML::TreeBuilder.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Parser, HTML::TreeBuilder, HTML::Element
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995\-1998 Gisle Aas, 1999\-2004 Sean M. Burke, 2005 Andy Lester,
2006 Pete Krawczyk.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
.SH "AUTHOR"
.IX Header "AUTHOR"
Currently maintained by Pete Krawczyk \f(CW\*(C`<petek@cpan.org>\*(C'\fR
.PP
Original authors: Gisle Aas, Sean Burke and Andy Lester.
