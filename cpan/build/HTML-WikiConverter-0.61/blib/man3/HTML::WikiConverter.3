.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::WikiConverter 3"
.TH HTML::WikiConverter 3 "2006-07-21" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
HTML::WikiConverter \- Convert HTML to wiki markup
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use HTML::WikiConverter;
\&  my $wc = new HTML::WikiConverter( dialect => 'MediaWiki' );
.Ve
.PP
.Vb 2
\&  # Provide HTML directly
\&  print $wc->html2wiki( $html );
.Ve
.PP
.Vb 2
\&  # ...which is the same as
\&  print $wc->html2wiki( html => $html );
.Ve
.PP
.Vb 2
\&  # Or fetch it from a file
\&  print $wc->html2wiki( file => $path );
.Ve
.PP
.Vb 2
\&  # ...slurp it all at once rather than parsing incrementally
\&  print $wc->html2wiki( file => $path, slurp => 1 );
.Ve
.PP
.Vb 2
\&  # Or from a URI
\&  print $wc->html2wiki( uri => $uri );
.Ve
.PP
.Vb 2
\&  # Get a list of installed dialects
\&  my @dialects = HTML::WikiConverter->available_dialects;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`HTML::WikiConverter\*(C'\fR is an \s-1HTML\s0 to wiki converter. It can convert \s-1HTML\s0
source into a variety of wiki markups, called wiki \*(L"dialects\*(R". The following
dialects are supported:
.PP
.Vb 13
\&  DokuWiki
\&  Kwiki
\&  MediaWiki
\&  MoinMoin
\&  Oddmuse
\&  PbWiki
\&  PhpWiki
\&  PmWiki
\&  SlipSlap
\&  TikiWiki
\&  UseMod
\&  WakkaWiki
\&  WikkaWiki
.Ve
.PP
Note that while dialects usually produce satisfactory wiki markup, not
all features of all dialects are supported. Consult individual
dialects' documentation for details of supported features. Suggestions
for improvements, especially in the form of patches, are very much
appreciated.
.SH "METHODS"
.IX Header "METHODS"
.Sh "new"
.IX Subsection "new"
.Vb 1
\&  my $wc = new HTML::WikiConverter( dialect => $dialect, %attrs );
.Ve
.PP
Returns a converter for the specified wiki dialect. Croaks if
\&\f(CW$dialect\fR is not provided or its dialect module is not installed on
your system. Additional attributes may be specified in \f(CW%attrs\fR; see
\&\*(L"\s-1ATTRIBUTES\s0\*(R" for a list of recognized attributes.
.Sh "html2wiki"
.IX Subsection "html2wiki"
.Vb 4
\&  $wiki = $wc->html2wiki( $html, %attrs );
\&  $wiki = $wc->html2wiki( html => $html, %attrs );
\&  $wiki = $wc->html2wiki( file => $file, %attrs );
\&  $wiki = $wc->html2wiki( uri => $uri, %attrs );
.Ve
.PP
Converts \s-1HTML\s0 source to wiki markup for the current dialect. Accepts
either an \s-1HTML\s0 string \f(CW$html\fR, an file \f(CW$file\fR, or a \s-1URI\s0 <$uri> to
read from.
.PP
Attributes assigned in \f(CW%attrs\fR (see \*(L"\s-1ATTRIBUTES\s0\*(R") will augment
or override previously assigned attributes for the duration of the
\&\f(CW\*(C`html2wiki()\*(C'\fR call.
.Sh "given_html"
.IX Subsection "given_html"
.Vb 1
\&  my $html = $wc->given_html;
.Ve
.PP
Returns the \s-1HTML\s0 passed to or fetched (ie, from a file or \s-1URI\s0) by the
last \f(CW\*(C`html2wiki()\*(C'\fR method call. Useful for debugging.
.Sh "parsed_html"
.IX Subsection "parsed_html"
.Vb 1
\&  my $parsed_html = $wc->parsed_html;
.Ve
.PP
Returns HTML::TreeBuilder's string representation of the
last-parsed syntax tree, showing how the input \s-1HTML\s0 was parsed
internally. Also useful for debugging.
.Sh "available_dialects"
.IX Subsection "available_dialects"
.Vb 1
\&  my @dialects = HTML::WikiConverter->available_dialects;
.Ve
.PP
Returns a list of all available dialects by searching the directories
in \f(CW@INC\fR for \f(CW\*(C`HTML::WikiConverter::\*(C'\fR modules.
.Sh "rules_for_tag"
.IX Subsection "rules_for_tag"
.Vb 1
\&  my $rules = $wc->rules_for_tag( $tag );
.Ve
.PP
Returns the rules that will be used for converting elements of the
given tag. Note that the rules used for a particular tag may depend on
the current set of attributes being used.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
You may configure \f(CW\*(C`HTML::WikiConverter\*(C'\fR using a number of
attributes. These may be passed as arguments to the \f(CW\*(C`new\*(C'\fR
constructor, or can be called as object methods on an H::WC object.
.PP
Some dialects allow other attributes in addition to those below, and
may override the attributes' default values. Consult the dialect's
documentation for details.
.Sh "base_uri"
.IX Subsection "base_uri"
\&\s-1URI\s0 to use for converting relative URIs to absolute ones. This
effectively ensures that the \f(CW\*(C`src\*(C'\fR and \f(CW\*(C`href\*(C'\fR attributes of image
and anchor tags, respectively, are absolute before converting the \s-1HTML\s0
to wiki markup, which is necessary for wiki dialects that handle
internal and external links separately. Relative URIs are only
converted to absolute ones if the \f(CW\*(C`base_uri\*(C'\fR argument is
present. Defaults to \f(CW\*(C`undef\*(C'\fR.
.Sh "dialect"
.IX Subsection "dialect"
(Required) Dialect to use for converting \s-1HTML\s0 into wiki markup. See
the \*(L"\s-1DESCRIPTION\s0\*(R" section above for a list of dialects. \f(CW\*(C`new()\*(C'\fR
will fail if the dialect given is not installed on your system. Use
\&\f(CW\*(C`available_dialects()\*(C'\fR to list installed dialects.
.Sh "encoding"
.IX Subsection "encoding"
Specifies the encoding used by the \s-1HTML\s0 to be converted. Also
determines the encoding of the wiki markup returned by the
\&\f(CW\*(C`html2wiki\*(C'\fR method. Defaults to \f(CW"utf8"\fR.
.Sh "escape_entities"
.IX Subsection "escape_entities"
Potentially unsafe characters found within text nodes can be
automatically encoded into their corresponding \s-1HTML\s0 entities, a
feature enabled by giving the \f(CW\*(C`escape_entities\*(C'\fR a true value.
Defaults to true.
.PP
head2 passthrough_naked_tags
.PP
Boolean indicating whether tags with no attributes (\*(L"naked\*(R" tags)
should be removed and replaced with their content. By default, this
only applies to non-semantic tags such as <span>,
<div>, etc., but does not apply to semantic tags such as
<strong>, <address>, etc. To override this behavior
and specify the tags that should be considered for passthrough,
provide this attribute with a reference to an array of tag names.
Defaults to false, but you'll probably want to enable it.
.Sh "preprocess"
.IX Subsection "preprocess"
Code reference that gets invoked after \s-1HTML\s0 is parsed but before it is
converted into wiki markup. The callback is passed two arguments: the
\&\f(CW\*(C`HTML::WikiConverter\*(C'\fR object and a HTML::Element pointing to the
root node of the \s-1HTML\s0 tree created by HTML::TreeBuilder.
.Sh "slurp"
.IX Subsection "slurp"
Boolean that, if enabled, bypasses \f(CW\*(C`HTML::Parser\*(C'\fR's incremental
parsing (thus \fIslurping\fR the file in all at once) of files when
reading \s-1HTML\s0 files. If File::Slurp is installed, its \f(CW\*(C`read_file()\*(C'\fR
function will be used to perform slurping; otherwise, a common Perl
idiom will be used for slurping instead. This option is only used if
you call \f(CW\*(C`html2wiki()\*(C'\fR with the \f(CW\*(C`file\*(C'\fR argument.
.Sh "strip_empty_tags"
.IX Subsection "strip_empty_tags"
Strips elements containing no content (unless those elements
legitimately contain no content, such as is the case for \f(CW\*(C`br\*(C'\fR and
\&\f(CW\*(C`img\*(C'\fR tags, for example). Defaults to false.
.Sh "strip_tags"
.IX Subsection "strip_tags"
A reference to an array of tags to be removed from the \s-1HTML\s0 input
prior to conversion to wiki markup. Tag names are the same as those
used in HTML::Element. Defaults to \f(CW\*(C`[ '~comment', 'head',
\&'script', 'style' ]\*(C'\fR.
.Sh "user_agent"
.IX Subsection "user_agent"
Specifies the LWP::UserAgent object to be used when fetching the
\&\s-1URI\s0 passed to \f(CW\*(C`html2wiki()\*(C'\fR. If unspecified and \f(CW\*(C`html2wiki()\*(C'\fR is
passed a \s-1URI\s0, a default user agent will be created.
.Sh "wiki_uri"
.IX Subsection "wiki_uri"
Takes a \s-1URI\s0, regular expression, or coderef (or a reference to an
array of elements of these types) used to determine which links are to
wiki pages: a link whose \f(CW\*(C`href\*(C'\fR parameter matches \f(CW\*(C`wiki_uri\*(C'\fR will be
treated as a link to a wiki page. In addition, \f(CW\*(C`wiki_uri\*(C'\fR will be
used to extract the title of the wiki page. The way this is done
depends on whether the \f(CW\*(C`wiki_uri\*(C'\fR has been set to a string, regexp,
or coderef. The default is \f(CW\*(C`undef\*(C'\fR, meaning that all links will be
treated as external links by default.
.PP
If \f(CW\*(C`wiki_uri\*(C'\fR is a string, it is assumed that URIs to wiki pages are
created by joining the \f(CW\*(C`wiki_uri\*(C'\fR with the wiki page title. For
example, the English Wikipedia might use
\&\f(CW"http://en.wikipedia.org/wiki/"\fR as the value of \f(CW\*(C`wiki_uri\*(C'\fR. Ward's
wiki might use \f(CW"http://c2.com/cgi/wiki?"\fR. 
.PP
\&\f(CW\*(C`wiki_uri\*(C'\fR can also be a regexp that matches URIs to wiki pages and
also extracts the page title from them. For example, the English
Wikipedia might use
\&\f(CW\*(C`qr~http://en\e.wikipedia\e.org/w/index\e.php\e?title\e=([^&]+)~\*(C'\fR.
.PP
\&\f(CW\*(C`wiki_uri\*(C'\fR can also be a coderef that takes the current
\&\f(CW\*(C`HTML::WikiConverter\*(C'\fR object and a \s-1URI\s0 object. It should return
the title of the wiki page extracted from the \s-1URI\s0, or \f(CW\*(C`undef\*(C'\fR if the
\&\s-1URI\s0 doesn't represent a link to a wiki page.
.PP
As mentioned above, the \f(CW\*(C`wiki_uri\*(C'\fR attribute can either take a single
URI/regexp/coderef element or it may be assigned a reference to an
array of any number of these elements. This is useful for wikis that
have different ways of creating links to wiki pages. For example, the
English Wikipedia might use:
.PP
.Vb 7
\&  my $wc = new HTML::WikiConverter(
\&    dialect => 'MediaWiki',
\&    wiki_uri => [
\&      'http://en.wikipiedia.org/wiki/',
\&      sub { pop->query_param('title') } # requires URI::QueryParam
\&    ]
\&  );
.Ve
.Sh "wrap_in_html"
.IX Subsection "wrap_in_html"
Helps HTML::TreeBuilder parse \s-1HTML\s0 fragments by wrapping \s-1HTML\s0 in
\&\f(CW\*(C`<html>\*(C'\fR and \f(CW\*(C`</html>\*(C'\fR before passing it through
\&\f(CW\*(C`html2wiki\*(C'\fR. Boolean, enabled by default.
.SH "ADDING A DIALECT"
.IX Header "ADDING A DIALECT"
Consult HTML::WikiConverter::Dialects for documentation on how to
write your own dialect module for \f(CW\*(C`HTML::WikiConverter\*(C'\fR. Or if you're
not up to the task, drop me an email and I'll have a go at it when I
get a spare moment.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
HTML::Tree, Convert::Wiki
.SH "AUTHOR"
.IX Header "AUTHOR"
David J. Iberri, \f(CW\*(C`<diberri@cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-html\-wikiconverter at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=HTML\-WikiConverter>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc HTML::WikiConverter
.Ve
.PP
You can also look for information at:
.IP "* AnnoCPAN: Annotated \s-1CPAN\s0 documentation" 4
.IX Item "AnnoCPAN: Annotated CPAN documentation"
<http://annocpan.org/dist/HTML\-WikiConverter>
.IP "* \s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<http://cpanratings.perl.org/d/HTML\-WikiConverter>
.IP "* \s-1RT:\s0 \s-1CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTML\-WikiConverter>
.IP "* Search \s-1CPAN\s0" 4
.IX Item "Search CPAN"
<http://search.cpan.org/dist/HTML\-WikiConverter>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Tatsuhiko Miyagawa for suggesting
Bundle::HTMLWikiConverter as well as providing code for the
\&\f(CW\*(C`available_dialects()\*(C'\fR class method.
.PP
My thanks also goes to Martin Kudlvasr for catching (and fixing!) a
bug in the logic of how \s-1HTML\s0 files were processed.
.PP
Big thanks to Dave Schaefer for the PbWiki dialect and for the idea
behind the new \f(CW\*(C`attributes()\*(C'\fR implementation.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2006 David J. Iberri, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
